import{_ as a,c as t,a as r,o as i}from"./app-Bg3bfEUT.js";const s="/yuzhou-site/assets/%E5%B7%A5%E4%BD%9C%E5%BE%AA%E7%8E%AF%E7%A4%BA%E6%84%8F%E5%9B%BE-cfnKGbNj.png",o="/yuzhou-site/assets/react%E4%B8%BB%E6%B5%81%E7%A8%8B-DXXxOs_p.png",n={};function c(p,e){return i(),t("div",null,e[0]||(e[0]=[r('<p><img src="'+s+'" alt="alt text"></p><p>图示中存在两大循环，一个是任务调度循环和fiber构造循环</p><h2 id="任务调度循环" tabindex="-1"><a class="header-anchor" href="#任务调度循环"><span>任务调度循环</span></a></h2><p>Scheduler.js，循环调用，控制任务的调度</p><h2 id="fiber构造循环" tabindex="-1"><a class="header-anchor" href="#fiber构造循环"><span>fiber构造循环</span></a></h2><p>控制fiber树的构造，通过深度优先遍历</p><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><ol><li><p>任务调度循环数据结构:二叉堆，循环执行堆的定点，直到堆被清空</p></li><li><p>主要用于任务调度，不关心任务是什么，具体任务其实就是执行回调函数performSyncWorkOnRoot或performConcurrentWorkOnRoot.属于宏观调度</p></li><li><p>fiber树构造是树结构，执行深度有限遍历</p></li><li><p>fiber构造循环是任务的一部分，它只是任务(task)的一部分(如performSyncWorkOnRoot包括: fiber树的构造, DOM渲染, 调度检测), 只负责fiber树的构造.</p></li></ol><p>fiber构造循环是任务调度循环中的一部分，每个任务都会重新构造一个fiber树</p><h2 id="react主干逻辑" tabindex="-1"><a class="header-anchor" href="#react主干逻辑"><span>react主干逻辑</span></a></h2><p>两大循环总结：大循环（任务调度）负责调度task，小循环（fiber构造循环）负责实现task</p><p><img src="'+o+'" alt="alt text"></p><p>执行task包括如下</p><ol><li>fiber构造循环是task的实现环节之一, 循环完成之后会构造出最新的 fiber 树.</li><li>commitRoot是task的实现环节之二, 把最新的 fiber 树最终渲染到页面上, task完成.</li></ol>',14)]))}const h=a(n,[["render",c]]),f=JSON.parse('{"path":"/article/%E5%B7%A5%E4%BD%9C%E5%BE%AA%E7%8E%AF/","title":"工作循环","lang":"zh-CN","frontmatter":{"title":"工作循环","createTime":"2025/07/30 22:49","permalink":"/article/工作循环/"},"readingTime":{"minutes":1.22,"words":365},"git":{"createdTime":1753890585000,"updatedTime":1754215018000,"contributors":[{"name":"onlylovefish","username":"onlylovefish","email":"2511452548@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/onlylovefish?v=4","url":"https://github.com/onlylovefish"}]},"filePathRelative":"sourceCode/react篇/工作循环.md","headers":[],"categoryList":[{"id":"6459a8","sort":10000,"name":"sourceCode"},{"id":"d601c1","sort":10001,"name":"react篇"}]}');export{h as comp,f as data};
