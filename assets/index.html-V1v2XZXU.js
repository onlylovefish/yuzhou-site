import{_ as e,c as t,a,o as h}from"./app-Bg3bfEUT.js";const n="/yuzhou-site/assets/%E5%90%AF%E5%8A%A8bash-Cp2enAp0.png",l="/yuzhou-site/assets/%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86-DUaE7gCd.png",r="/yuzhou-site/assets/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A3%E7%90%86-BWNJdTIz.png",d="/yuzhou-site/assets/firefox1-DBobie93.png",p="/yuzhou-site/assets/firefox2-BVtJpWFP.png",k="/yuzhou-site/assets/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BB%A3%E7%90%86-je3s_Hyc.png",c="/yuzhou-site/assets/%E6%8A%93%E5%8C%85%E4%BF%A1%E6%81%AF-BtwhCAL-.png",i="/yuzhou-site/assets/%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6-CyvvwzX0.png",o="/yuzhou-site/assets/host%E8%BD%AC%E5%8F%91-CkvU8acb.png",g="/yuzhou-site/assets/%E6%9C%AC%E5%9C%B0%E6%9B%BF%E6%8D%A2-DZVWeelM.png",m="/yuzhou-site/assets/whistle%E4%B8%8A%E9%85%8D%E7%BD%AE%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC-DKkXGd8B.png",u="/yuzhou-site/assets/%E4%BB%A3%E7%90%86%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E9%85%8D%E7%BD%AE-C7FkepgV.png",b="/yuzhou-site/assets/whistle%E6%8F%92%E5%85%A5js-D2GxrN8b.png",v="/yuzhou-site/assets/%E6%B3%A8%E5%85%A5%E5%86%85%E5%AE%B9-BtzEeS32.png",y="/yuzhou-site/assets/html%E6%B3%A8%E5%85%A5-53ZNI4-W.png",f="/yuzhou-site/assets/rootca-DgF6iJHF.PNG",A="/yuzhou-site/assets/%E7%9C%9F%E6%9C%BA%E6%8A%93%E5%8F%96%E5%8C%85-DWvg3FrK.png",B={};function w(E,s){return h(),t("div",null,s[0]||(s[0]=[a('<p>https://wproxy.org/whistle/</p><p>作为前端，日常本地开发联调或者线上排查问题，都需要查看网络请求，做一些数据mock，或者一些映射等等，尤其是一些移动端场景，比如h5等，本地开发工具，chrome调试缺乏一些功能，没有那么灵活，需要一些代理工具，篡改一些请求，配置等。</p><h2 id="常规代理工具" tabindex="-1"><a class="header-anchor" href="#常规代理工具"><span>常规代理工具</span></a></h2><h3 id="名次解释" tabindex="-1"><a class="header-anchor" href="#名次解释"><span>名次解释</span></a></h3><p>抓包：包指的是网络数据包，包括发送的请求和返回的数据，pc可以通过chrome，但是app抓包不太行 代理：中间角色，在本地调试时不需要经历鉴权，或者其他限制，直接代理请求的url请求，包括请求和返回</p><h3 id="http代理" tabindex="-1"><a class="header-anchor" href="#http代理"><span>http代理</span></a></h3><p>代理是客户端和服务端之间的中转服务，工作原理如下：</p><p>不经过代理请求：客户端和服务端直接建立连接后，即可开始交换数据</p><p>经过代理请求：客户端不与服务端直接建立连接，而是先跟代理建立连接，将目标服务器的地址发送给代理，通过代理再和服务器建立连接，这里如果代理服务为http server，那么就是http代理</p><h2 id="常见代理工具及其特点" tabindex="-1"><a class="header-anchor" href="#常见代理工具及其特点"><span>常见代理工具及其特点</span></a></h2><table><thead><tr><th>工具名称</th><th>平台支持力度</th><th>是否免费</th><th>上手难度</th><th>文档</th><th>是否开源</th><th>主要特点</th></tr></thead><tbody><tr><td>Whistle</td><td>是</td><td>是</td><td>易</td><td>开源、丰富</td><td>是</td><td>界面友好、插件丰富</td></tr><tr><td>Charles</td><td>是</td><td>否</td><td>易</td><td>官方文档</td><td>否</td><td>功能强大、收费</td></tr><tr><td>Fiddler</td><td>是</td><td>是</td><td>一般</td><td>官方文档</td><td>否</td><td>老牌工具、功能全面</td></tr><tr><td>Proxyman</td><td>是（主打Mac）</td><td>否</td><td>易</td><td>官方文档</td><td>否</td><td>界面美观、易用</td></tr></tbody></table><p>根据上面的对比，<a href="https://github.com/avwo/whistle" target="_blank" rel="noopener noreferrer">whistle</a>对于我们来说是个优秀的选择，所以记录下其使用方法，以及一些常见的操作，和笔者日常的实践</p><h2 id="whistle介绍及使用方法" tabindex="-1"><a class="header-anchor" href="#whistle介绍及使用方法"><span>whistle介绍及使用方法</span></a></h2><p>Whistle 是一个基于 Node.js 开发的功能强大、操作简单的跨平台抓包调试工具，支持多种代理模式（如 HTTP 代理、HTTPS 代理、Socks 代理、反向代理等），可用于抓包分析或通过配置规则修改 HTTP、HTTPS、HTTP/2、WebSocket、TCP 等请求。Whistle 还内置了 Weinre、Log、Composer 等工具，支持查看远程页面的 DOM 结构、查看页面 console 输出、重放编辑请求等。此外，Whistle 支持插件扩展，也可单独作为 NPM 包被其他项目引用。</p><blockquote><p>handlebook ：https://wproxy.org/whistle/</p></blockquote><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span>使用方式</span></a></h2><h3 id="安装及启动" tabindex="-1"><a class="header-anchor" href="#安装及启动"><span>安装及启动</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -g</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> whistle</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">w2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+n+'" alt="启动"></p><h3 id="配置代理" tabindex="-1"><a class="header-anchor" href="#配置代理"><span>配置代理</span></a></h3><ol><li><p>全局代理，这种就是本机发出的所有请求都走代理，通过命令 w2 proxy或者手动配置 Mac: System Preferences &gt; Network &gt; Advanced &gt; Proxies &gt; HTTP or HTTPS <img src="'+l+'" alt="全局代理"></p></li><li><p>浏览器代理，安装浏览器代理插件</p></li></ol><p>安装Chrome代理插件：推荐安装SwitchyOmega <img src="'+r+'" alt="浏览器代理"></p><p>Firefox: 地址栏输入访问 about:preferences，找到 Network Proxy，选择 手动代理配置(Manual proxy configuration)，输入代理服务器地址、端口，保存</p><p><img src="'+d+'" alt="alt text"><img src="'+p+'" alt="alt text"></p><ol start="3"><li>移动端代理 <img src="'+k+'" alt="移动端代理"></li></ol><p>安装证书 安装本机默认 Whistle 实例的证书：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">w2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ca</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>随后即可看到对应的抓包信息了 <img src="'+c+'" alt="alt text"></p><p>特别说明，因为ios模拟器无法扫码，所以模拟器的安装方式如下</p><p>设置全局代理后，safari地址栏输入rootca.pro，按照提示安装证书（ios安装根证书需要连接远程服务器进行验证，需要暂时把https拦截功能关掉</p><p>Settings-&gt;General-&gt;Device Management-&gt;安装刚刚下载的证书</p><p>手动信任自定义根证书，设置路径：setting-&gt;general-&gt;About-&gt;&gt;certificate trust testings</p><p>真机可以通过扫码安装证书 <img src="'+i+`" alt="alt text"></p><h2 id="配置与匹配" tabindex="-1"><a class="header-anchor" href="#配置与匹配"><span>配置与匹配</span></a></h2><p>whistle操作均可通过配置实现，配置方式扩展于系统hosts配置方式，有丰富的匹配模式及更灵活的配置方式</p><h2 id="配置方式" tabindex="-1"><a class="header-anchor" href="#配置方式"><span><a href="https://wproxy.org/whistle/mode.html" target="_blank" rel="noopener noreferrer">配置方式</a></span></a></h2><p>whistle将请求url与pattern匹配，如果婆培到就执行operatorURL对应的操作</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pattern</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ooperatorURI</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="匹配规则" tabindex="-1"><a class="header-anchor" href="#匹配规则"><span><a href="https://wproxy.org/whistle/principle.html" target="_blank" rel="noopener noreferrer">匹配规则</a></span></a></h2><p>whistle的匹配模式大体可以分为域名、路径、正则、精确匹配、通配符匹配,更多的可以查看whistle的handbook介绍</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">www.test.com</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 127.0.0.1:9999</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> www.test.com/xxx</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 127.0.0.1:8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用功能" tabindex="-1"><a class="header-anchor" href="#常用功能"><span>常用功能</span></a></h2><p><strong>1. host转发</strong> 相当于浏览器的host文件，如果找不到再去查找本机的host文件，whistle除了传统的host配置，还支持子路径和端口的host转发配置，配置方式：Rules-&gt;create-&gt;host <img src="`+o+`" alt="alt text"></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">https://data.cma.cn/</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://wproxy.org/whistle/frequet.html</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 域名映射</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">https://data.cma.cn/</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://wproxy.org/whistle/frequet.html:8080</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 端口映射</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">https://data.cma.cn/api</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://wproxy.org/whistle/frequet.html:8080</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 路径匹配</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.本地替换</strong></p><p>把响应内容替换为本地文件内容</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">data.cma.cn/kbweb/home/getStationID</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file:///Users/yuanlu/workspace/waterHome/yuzhou-site/docs/practice/test/test.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+g+'" alt="alt text"></p><p><strong>3.修改请求和返回</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">data.cma.cn/kbweb/home/getStationID</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> resBody://{test.json}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+m+'" alt="alt text"><img src="'+u+'" alt="alt text"></p><p><strong>4. js注入</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">https://data.cma.cn/</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> jsAppend:///Users/yuanlu/workspace/waterHome/yuzhou-site/docs/practice/test/jsAppend.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+b+'" alt="alt text"></p><p><strong>5. html注入</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">data.cma.cn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> htmlAppend://{test.html}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+v+'" alt="alt text"><img src="'+y+`" alt="alt text"></p><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h2><h3 id="whistle-inspect" tabindex="-1"><a class="header-anchor" href="#whistle-inspect"><span>whistle inspect</span></a></h3><p>用于往页面中插入vconsole.可以看到一些调试的console信息</p><h3 id="whistle-script" tabindex="-1"><a class="header-anchor" href="#whistle-script"><span>whistle.script</span></a></h3><p>script.js 是你本地的 JS 文件，里面可以写自定义逻辑。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">data.cma.cn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> whistle.script://path/to/your/script.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// script.js</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">req</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">includes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/api/test</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> JSON</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stringify</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> msg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mock data</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="whistle-weinre" tabindex="-1"><a class="header-anchor" href="#whistle-weinre"><span>whistle weinre</span></a></h3><p>data.cma.cn weinre://</p><h2 id="利用whistle查看页面日志" tabindex="-1"><a class="header-anchor" href="#利用whistle查看页面日志"><span>利用whistle查看页面日志</span></a></h2><p>利用whistle注入vconsole等h5调试插件</p><ol><li><p>手机安装whistle的证书，然后信任即可，即可在whistle中抓到手机访问的请求 <img src="`+i+'" alt="安装证书"></p></li><li><p>手机扫码安装证书，在浏览器中输入rootca <img src="'+f+'" alt="rootca"></p></li><li><p>在手机（ios）设置-&gt;关于手机-&gt;证书信任设置-&gt;信任whistle的证书 <img src="'+A+'" alt="alt text"></p></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>除了本文的代理调试，还有云真机，安卓真机插线调试，不插线调试，全链路mock测试等等</p><p>实际工作中需要结合实际，搭配使用</p>',74)]))}const D=e(B,[["render",w]]),C=JSON.parse('{"path":"/article/xjdruyug/","title":"调试工具-whistle","lang":"zh-CN","frontmatter":{"title":"调试工具-whistle","createTime":"2025/06/22 22:46:55","permalink":"/article/xjdruyug/"},"readingTime":{"minutes":5.17,"words":1552},"git":{"createdTime":1750604596000,"updatedTime":1751191441000,"contributors":[{"name":"onlylovefish","username":"onlylovefish","email":"2511452548@qq.com","commits":3,"avatar":"https://avatars.githubusercontent.com/onlylovefish?v=4","url":"https://github.com/onlylovefish"}]},"filePathRelative":"practice/whistle调试介绍.md","headers":[],"categoryList":[{"id":"8c4040","sort":10002,"name":"practice"}]}');export{D as comp,C as data};
